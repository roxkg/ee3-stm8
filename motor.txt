/**
  ******************************************************************************
  * @file    Project/main.c 
  * @author  MCD Application Team
  * @version V2.3.0
  * @date    16-June-2017
  * @brief   Main program body
   ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
  */ 


/* Includes ------------------------------------------------------------------*/
#include "stm8s.h"

/* Private defines -----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

void delay (int ms)
{
	int i = 0;
	int j = 0;
	for (i=0; i<=ms; i++)
	{
		for (j=0; j<=120; j++)
		_asm("nop");
	}
}

void TIM1_Delay(uint16_t s)
{
	TIM1->CNTRH = 0;
	TIM1->CNTRL = 0;
	TIM1->CR1 |= (uint8_t)TIM1_CR1_CEN;
	
	while(TIM1_GetCounter() < s);
	TIM1->CR1 &= (uint8_t)(~TIM1_CR1_CEN);
	//GPIO_WriteLow(GPIOD, GPIO_PIN_7);
}

void main(void)
{
	//uint16_t counter;
	GPIO_DeInit(GPIOD);
	GPIO_Init(GPIOA,GPIO_PIN_1,		GPIO_MODE_OUT_PP_HIGH_FAST);
	//GPIO_DeInit(GPIOB);
	GPIO_Init(GPIOD, GPIO_PIN_4,GPIO_MODE_IN_PU_IT);
	GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_LOW_SLOW);
	//GPIO_Init(GPIOB,GPIO_PIN_5,GPIO_MODE_OUT_PP_LOW_SLOW);
	GPIO_WriteLow(GPIOD, GPIO_PIN_7);
	//TIM2_TimeBaseInit(TIM2_PRESCALER_1,
	/* Time base configuration */      
	TIM1_TimeBaseInit(15,TIM1_COUNTERMODE_UP,1000,0);
	TIM1_Cmd(DISABLE);
  /* Infinite loop */
  while (1)
  {
   
		if (GPIO_ReadInputPin(GPIOD, GPIO_PIN_4)==0)
		{
			delay(10);
			if (GPIO_ReadInputPin(GPIOD, GPIO_PIN_4)==0)
			{
				while(GPIO_ReadInputPin(GPIOD, GPIO_PIN_4)==0);
				GPIO_WriteHigh(GPIOD, GPIO_PIN_7);
				delay(30000);
				//TIM1_Delay(10);
				GPIO_WriteLow(GPIOD, GPIO_PIN_7);
			}
		}
		
	}	
  
  
}

#ifdef USE_FULL_ASSERT

/**
  * @brief  Reports the name of the source file and the source line number
  *   where the assert_param error has occurred.
  * @param file: pointer to the source file name
  * @param line: assert_param error line source number
  * @retval : None
  */
void assert_failed(u8* file, u32 line)
{ 
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
  {
  }
}
#endif


/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/